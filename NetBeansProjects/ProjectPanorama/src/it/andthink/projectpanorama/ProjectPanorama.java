/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.andthink.projectpanorama;

import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.Position;
import javax.swing.tree.*;

/**
 *
 * @author meranr
 */
public class ProjectPanorama extends javax.swing.JFrame {

	/**
	 * Creates new form ProjectPanorama
	 */
	public ProjectPanorama() {
		initComponents();
		populateTree();
		this.setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRightPopup = new javax.swing.JPopupMenu();
        jMenuCopia = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jProjectTree = new javax.swing.JTree();
        jTextFilter = new javax.swing.JTextField();
        jButtonFilter = new javax.swing.JButton();

        jMenuCopia.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuCopia.setText("Copia");
        jMenuCopia.setToolTipText("");
        jMenuCopia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCopiaActionPerformed(evt);
            }
        });
        jRightPopup.add(jMenuCopia);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project: Panorama");

        jToolBar1.setRollover(true);

        jProjectTree.setModel(null);
        jProjectTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jProjectTree.setRootVisible(false);
        jProjectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jProjectTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jProjectTreeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jProjectTree);

        jToolBar1.add(jScrollPane1);

        jTextFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFilterKeyReleased(evt);
            }
        });

        jButtonFilter.setText("Filtra");
        jButtonFilter.setToolTipText("");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFilter))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed
		populateTree();
	}//GEN-LAST:event_jButtonFilterActionPerformed

	private void jProjectTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProjectTreeMousePressed


		int selRow = jProjectTree.getRowForLocation(evt.getX(), evt.getY());
		//Get the selection path for the row
		TreePath selPath = jProjectTree.getPathForLocation(evt.getX(), evt.getY());
		if (selRow != -1) {
			if (evt.getClickCount() == 1) {
				if (evt.isPopupTrigger()) {
					//Make the selection
					jProjectTree.setSelectionPath(selPath);
					//Now do pop up
					jRightPopup.show((Component) evt.getSource(), evt.getX(), evt.getY());
				}
			}
		}


		/*
		 * if (evt.isPopupTrigger()) { jRightPopup.show((Component) evt.getSource(), evt.getX(), evt.getY());
		 * }
		 */
	}//GEN-LAST:event_jProjectTreeMousePressed

	private void jProjectTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProjectTreeMouseReleased
		int selRow = jProjectTree.getRowForLocation(evt.getX(), evt.getY());
		//Get the selection path for the row
		TreePath selPath = jProjectTree.getPathForLocation(evt.getX(), evt.getY());
		if (selRow != -1) {
			if (evt.getClickCount() == 1) {
				if (evt.isPopupTrigger()) {
					//Make the selection
					jProjectTree.setSelectionPath(selPath);
					//Now do pop up
					jRightPopup.show((Component) evt.getSource(), evt.getX(), evt.getY());
				}
			}
		}
		/*
		 * if (evt.isPopupTrigger()) { jRightPopup.show((Component) evt.getSource(), evt.getX(), evt.getY());
		 * }
		 */
	}//GEN-LAST:event_jProjectTreeMouseReleased

	private void jMenuCopiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCopiaActionPerformed
		StringSelection strsel = new StringSelection(jProjectTree.getSelectionPath().getLastPathComponent().toString());
		Clipboard clbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
		clbrd.setContents(strsel, strsel);
	}//GEN-LAST:event_jMenuCopiaActionPerformed

	private void jTextFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFilterKeyReleased
		int key = evt.getKeyCode();
		if (key == KeyEvent.VK_ENTER) {
			populateTree();
		}// TODO add your handling code here:
	}//GEN-LAST:event_jTextFilterKeyReleased

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For
		 * details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For
		 * details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			//javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ProjectPanorama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
			/*
			 * try { for (javax.swing.UIManager.LookAndFeelInfo info :
			 * javax.swing.UIManager.getInstalledLookAndFeels()) { if ("Nimbus".equals(info.getName())) {
			 * javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (
			 * ClassNotFoundException | InstantiationException | IllegalAccessException |
			 * javax.swing.UnsupportedLookAndFeelException exc) {
			 * java.util.logging.Logger.getLogger(ShelfFrame.class.getName()).log(java.util.logging.Level.SEVERE,
			 * null, exc); }
			 */
		}
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new ProjectPanorama();
			}
		});
	}
	
	private Boolean populated = false;
	private DefaultTreeModel fullmodel;
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JMenuItem jMenuCopia;
    private javax.swing.JTree jProjectTree;
    private javax.swing.JPopupMenu jRightPopup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFilter;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
	NodeInfo[] nodes = {
		new NodeInfo("Design"),
		new NodeInfo("Master File", "MstDef", "C:/Sviluppo/PagoWEB/pago/Entity/Mask"),
		new NodeInfo("Detail File", "DtlDef", "C:/Sviluppo/PagoWEB/pago/Entity/Mask"),
		new NodeInfo("Master/Detail", "MDtDef", "C:/Sviluppo/PagoWEB/pago/Entity/Mask"),
		new NodeInfo("Dialog Window", "MskDef", "C:/Sviluppo/PagoWEB/pago/Entity/Mask"),
		new NodeInfo("Routine", "BtcDef", "C:/Sviluppo/PagoWEB/pago/Entity/Routine"),
		new NodeInfo("Page"),
		new NodeInfo("Report"),
		new NodeInfo("Query", "vqr", "C:/Sviluppo/PagoWEB/pago/exe"),
		new NodeInfo("Zoom"),
		new NodeInfo("Portlet"),
		new NodeInfo("PageletGroup"),
		new NodeInfo("Pagelet"),
		new NodeInfo("Jsp"),
		new NodeInfo("Documentation")};

	private void populateTree() {
		
		if(!populated){
			DefaultMutableTreeNode basenode = basenode();
			fullmodel = (DefaultTreeModel) new javax.swing.tree.DefaultTreeModel(basenode);
			jProjectTree.setModel(fullmodel);
			for (NodeInfo nodo : nodes) {
				if (!"".equals(nodo.path) && !"".equals(nodo.ext) && !"".equals(nodo.node)) {
					fillNode(nodo.path, nodo.ext, nodo.node);
				}
			}
			populated = true;
		}else{
		  
		}

		
		if (!"".equals(jTextFilter.getText())) {
			for (int i = 0; i < jProjectTree.getRowCount(); i++) {
				jProjectTree.expandRow(i);
			}
		}
		jProjectTree.repaint();
	}

	/**
	 *
	 * @param projPath Cartella dei file da inserire nell'albero
	 * @param ext Estensione del file
	 * @param prefix Ramo dell'albero i ncui deve finire il nodo
	 */
	private void fillNode(String projPath, final String ext, String prefix) {
		int startRow = 0;

		File dir = new File(projPath);
		File[] files = dir.listFiles(new FilenameFilter() {

			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith("." + ext);
			}
		});
		DefaultTreeModel model = (DefaultTreeModel) jProjectTree.getModel();
		TreePath path = jProjectTree.getNextMatch(prefix, startRow, Position.Bias.Forward);
		MutableTreeNode node = (MutableTreeNode) path.getLastPathComponent();

		for (File routinefile : files) {
			String nodename = routinefile.getName();
			String comment = "";
			comment = getComment(routinefile);
			int p = nodename.lastIndexOf('.');
			if (p > 0) {
				nodename = nodename.substring(0, p);
			}

			if (nodename.contains(jTextFilter.getText())) {
				// Create new node
				MutableTreeNode newNode = new DefaultMutableTreeNode(nodename +((comment.length()>0)? ": " :"")+ comment);
				// Insert new node as last child of node
				model.insertNodeInto(newNode, node, node.getChildCount());
			}
			//System.out.println();
		}
	}

	private String getComment(File file) {
		String str;

		try (BufferedReader in = new BufferedReader(new FileReader(file))) {
			while ((str = in. readLine()) != null) {
				int indiceIndex = str.indexOf("author=");
				if (indiceIndex >= 0) {
					str = in.readLine();
					int indiceComment = str.indexOf("comment=");
					if (indiceComment >= 0) {
						String nomeComment = str.substring(indiceComment + 9);
						return nomeComment;
					}
				}
			}
		} catch (IOException e) {
		}
		return "";
	}

	private DefaultMutableTreeNode basenode() {
		DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("root");
		DefaultMutableTreeNode treeNode2;
		for (NodeInfo nodo : nodes) {
			treeNode2 = new javax.swing.tree.DefaultMutableTreeNode(nodo.node);
			treeNode1.add(treeNode2);
		}
		return treeNode1;
	}
}

class NodeInfo {

	public String node = "";
	public String ext = "";
	public String path = "";

	public NodeInfo(String node, String ext, String path) {
		this.node = node;
		this.ext = ext;
		this.path = path;
	}

	public NodeInfo(String node) {
		this.node = node;
	}
}