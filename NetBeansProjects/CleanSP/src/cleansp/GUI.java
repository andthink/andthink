package cleansp;

import java.awt.Cursor;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SCOCRI
 */
public class GUI extends javax.swing.JFrame {

	/**
	 * Creates new form GUI
	 */
	public GUI() {
		this.fileFound = new ArrayList();
		model = new DefaultTableModel();
		model.addColumn("File");
		model.addColumn("Keep");

		try {
			icon = ImageIO.read(this.getClass().getResource("img/ico.png"));
		} catch (IOException ex) {
			Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
		}

		initComponents();

		 //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
		comboBox.addItem(".#");
		comboBox.addItem("original");
		comboBox.addItem("ancestor");
        comboBox.addItem("conflictdata");
        comboBox.addItem("master");
        comboBox.addItem("merged");
        comboBox.addItem("mergedother");
        comboBox.addItem("workingcopy");

		tableResult.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        BSearch = new javax.swing.JButton();
        DirChoose = new javax.swing.JTextField();
        BDirChoose = new javax.swing.JButton();
        PatternPanel = new javax.swing.JPanel();
        cbConflictData = new javax.swing.JCheckBox();
        cbAnchestor = new javax.swing.JCheckBox();
        cbMergedOther = new javax.swing.JCheckBox();
        cbMerged = new javax.swing.JCheckBox();
        cbWorkingCopy = new javax.swing.JCheckBox();
        cbMaster = new javax.swing.JCheckBox();
        cbDiesis = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableResult = new javax.swing.JTable();
        jButtonClean = new javax.swing.JButton();

        FileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clean Site Painter");
        setIconImage(icon);
        setType(java.awt.Window.Type.POPUP);

        BSearch.setText("Search");
        BSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSearchActionPerformed(evt);
            }
        });

        DirChoose.setText("C:\\Sviluppo\\PagoWEB\\pago");

        BDirChoose.setText("Scegli cartella");
        BDirChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDirChooseActionPerformed(evt);
            }
        });

        PatternPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File project da Cercare"));

        cbConflictData.setSelected(true);
        cbConflictData.setText("conflictdata");

        cbAnchestor.setSelected(true);
        cbAnchestor.setText("ancestor");

        cbMergedOther.setSelected(true);
        cbMergedOther.setText("mergedother");

        cbMerged.setSelected(true);
        cbMerged.setText("merged");

        cbWorkingCopy.setSelected(true);
        cbWorkingCopy.setText("workingcopy");

        cbMaster.setSelected(true);
        cbMaster.setText("master");

        cbDiesis.setSelected(true);
        cbDiesis.setText("diesis #");
        cbDiesis.setToolTipText("");
        cbDiesis.setActionCommand("diesis");

        javax.swing.GroupLayout PatternPanelLayout = new javax.swing.GroupLayout(PatternPanel);
        PatternPanel.setLayout(PatternPanelLayout);
        PatternPanelLayout.setHorizontalGroup(
            PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatternPanelLayout.createSequentialGroup()
                .addComponent(cbDiesis)
                .addGap(32, 32, 32)
                .addGroup(PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbMerged)
                    .addComponent(cbMaster))
                .addGap(51, 51, 51)
                .addGroup(PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbWorkingCopy)
                    .addComponent(cbConflictData))
                .addGap(46, 46, 46)
                .addGroup(PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbAnchestor)
                    .addComponent(cbMergedOther))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        PatternPanelLayout.setVerticalGroup(
            PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatternPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbWorkingCopy)
                    .addComponent(cbMaster)
                    .addComponent(cbMergedOther)
                    .addComponent(cbDiesis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PatternPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMerged)
                    .addComponent(cbConflictData)
                    .addComponent(cbAnchestor))
                .addGap(62, 62, 62))
        );

        cbDiesis.getAccessibleContext().setAccessibleName("diesis");

        tableResult.setAutoCreateRowSorter(true);
        tableResult.setModel(this.model);
        jScrollPane2.setViewportView(tableResult);

        jButtonClean.setText("Clean");
        jButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCleanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PatternPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DirChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BDirChoose)))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BSearch)
                            .addComponent(jButtonClean))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DirChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BDirChoose)
                    .addComponent(BSearch))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(PatternPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClean)
                        .addGap(45, 45, 45)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private ArrayList getEnabledPattern(){
		ArrayList patterns = new ArrayList();

		//Registro i pattern i cui checkbox sono selezioanti
		if(cbDiesis.isSelected()){
			patterns.add(".#");
		}
		
		if(cbAnchestor.isSelected()){
			patterns.add(".$ancestor");
		}

		if(cbConflictData.isSelected()){
			patterns.add(".$conflictdata");
		}

		if(cbMaster.isSelected()){
			patterns.add(".$master");
		}

		if(cbMerged.isSelected()){
			patterns.add(".$merged");
		}

		if(cbMergedOther.isSelected()){
			patterns.add(".$mergedother");
		}

		if(cbWorkingCopy.isSelected()){
			patterns.add(".$workingcopy");
		}

		return patterns;
	}

	private String getDurata(long inizio, long fine){
		//Calcolo la durata
		long durata = fine - inizio;
		int milli = (int) (durata % 1000);
		int sec = (int) (durata / 1000 % 60);
		int min = (int) (durata / 60000 % 60);
		int ore = (int) (durata / 3600000 % 24);

		return String.format("%02d", ore) + " h " +
			String.format("%02d", min) + " mm" +
			String.format("%02d", sec) + " ss " +
			String.format("%03d", milli) + " ms";
	}
	
	
	private void doSearch(){
		model.setRowCount(0);
		ArrayList patternEnabled = this.getEnabledPattern();

		//Registro la data di inizio
		java.util.Date date= new java.util.Date();
		long start= date.getTime();
		String startstr = new Timestamp(start).toString();

		//Imposto il cursore in stato WAIT
		this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		//Aggiorno la griglia dei risultati
		CleanSP CSP = new CleanSP(DirChoose.getText(), patternEnabled);
		CSP.processClean();
		this.fileFound = CSP.getFileFound();

		ArrayList FF = new ArrayList(new HashSet(this.fileFound));

		for(int i = 0; i < FF.size(); i++){
			//INSERISCI LE RIGHE
			model.insertRow(i, new Object[]{FF.get(i), "original"});
		}
		tableResult.updateUI();

		//Registro la data di fine
		date = new java.util.Date();
		long end = date.getTime();
		String endstr = new Timestamp(end).toString();

		String duratastr = this.getDurata(start, end);

		//Emetto la message log con il riepilogo
		JOptionPane.showMessageDialog(this,
			"Trovati: " + this.fileFound.size() + " files." + "\n" +
			"Inizio: " + startstr + "\n" +
			"Fine: " + endstr + "\n" +
			"Durata: " + duratastr,
			"Riepilogo ricerca",
			JOptionPane.INFORMATION_MESSAGE);

		//Reimposto il cursore di default
		this.setCursor(Cursor.getDefaultCursor());
	
	}
	
	private void BSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSearchActionPerformed
		// TODO add your handling code here:
		if(DirChoose.getText().equals("")){
			JOptionPane.showMessageDialog(this, "E' necessario indicare la cartella da processare.");
			return;
		}
		doSearch();
		
	}//GEN-LAST:event_BSearchActionPerformed

	private void BDirChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDirChooseActionPerformed
		// TODO add your handling code here:
		int returnVal = FileChooser.showOpenDialog(this);

		 if (returnVal == JFileChooser.APPROVE_OPTION) {
            DirChoose.setText(FileChooser.getSelectedFile().getPath());
            //This is where a real application would open the file.
        } else {
            DirChoose.setText("");
        }
	}//GEN-LAST:event_BDirChooseActionPerformed

	private void jButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCleanActionPerformed
		// TODO add your handling code here:
		int returnVal = JOptionPane.showConfirmDialog(this, "Procedere con l'eliminazione?", "Attenzione", JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_OPTION);

		if(returnVal == JOptionPane.YES_OPTION){
			//Imposto il cursore in stato WAIT
		this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			for(int i = 0; i < this.fileFound.size(); i++){
				File f = new File(this.fileFound.get(i).toString());

				System.out.println(this.fileFound.get(i).toString());

				f.getAbsoluteFile().delete();
			}

			JOptionPane.showMessageDialog(this, "File eliminati", "Fine", JOptionPane.INFORMATION_MESSAGE);
			((DefaultTableModel) tableResult.getModel()).setRowCount(0);
			//Reimposto il cursore di default
			this.setCursor(Cursor.getDefaultCursor());
		}		// TODO add your handling code here:
	}//GEN-LAST:event_jButtonCleanActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Windows look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Windows is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		 try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {}
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

	private Image icon = null;

	private DefaultTableModel model = null;
	private ArrayList fileFound = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BDirChoose;
    private javax.swing.JButton BSearch;
    private javax.swing.JTextField DirChoose;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JPanel PatternPanel;
    private javax.swing.JCheckBox cbAnchestor;
    private javax.swing.JCheckBox cbConflictData;
    private javax.swing.JCheckBox cbDiesis;
    private javax.swing.JCheckBox cbMaster;
    private javax.swing.JCheckBox cbMerged;
    private javax.swing.JCheckBox cbMergedOther;
    private javax.swing.JCheckBox cbWorkingCopy;
    private javax.swing.JButton jButtonClean;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableResult;
    // End of variables declaration//GEN-END:variables
}
